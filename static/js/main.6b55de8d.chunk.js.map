{"version":3,"sources":["context/alert/alertContext.js","context/firebase/firebaseContext.js","components/Form.js","components/Loader.js","components/Notes.js","pages/Home.js","pages/About.js","components/NavBar.js","components/Alert.js","context/alert/alertReducer.js","context/types.js","context/alert/AlertState.js","context/firebase/firebaseReducer.js","context/firebase/FirebaseState.js","App.js","serviceWorker.js","index.js"],"names":["AlertContext","createContext","FirebaseContext","Form","useState","value","setValue","alert","useContext","firebase","onSubmit","event","preventDefault","trim","addNote","then","show","catch","className","type","placeholder","onChange","e","target","Loader","role","Notes","notes","onRemove","TransitionGroup","component","map","note","CSSTransition","key","id","classNames","timeout","title","Date","toLocaleDateString","onClick","Home","loading","fetchNotes","removeNote","useEffect","About","NavBar","to","exact","Alert","hide","in","visible","enter","exit","mountOnEnter","unmountOnExit","text","aria-label","aria-hidden","handlers","state","payload","AlertReducer","action","DEFAULT","AlertState","children","useReducer","dispatch","Provider","filter","firebaseReducer","url","process","FirebaseState","showLoader","a","axios","get","res","Object","keys","data","date","toJSON","post","name","Error","message","delete","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.6b55de8d.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\n\r\n\r\nexport const AlertContext = createContext()","import { createContext } from 'react'\r\n\r\nexport const FirebaseContext = createContext()","import React, { useState, useContext } from 'react'\r\nimport { AlertContext } from '../context/alert/alertContext'\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext'\r\n\r\n\r\n\r\nexport const Form = () => {\r\n    const [value, setValue] = useState('')\r\n    const alert = useContext(AlertContext)\r\n    const firebase = useContext(FirebaseContext)\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault()\r\n        if (value.trim()) {\r\n            firebase.addNote(value.trim()).then(() => {\r\n                alert.show('Note was created', 'success')\r\n            }).catch(() => {\r\n                alert.show('Error', 'danger')\r\n            })\r\n            setValue('')\r\n        } else {\r\n            alert.show('Enter name of note')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={submitHandler}>\r\n            <div className=\"form-group\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Enter note name\"\r\n                    value={value}\r\n                    onChange={e => setValue(e.target.value)}\r\n                />\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\n\r\nexport const Loader = () => (\r\n    <div className=\"text-center\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n)","import React from 'react'\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\r\n\r\nexport const Notes = ({ notes, onRemove }) => (\r\n    <TransitionGroup component=\"ul\" className=\"list-group\">\r\n        {notes.map(note => (\r\n            <CSSTransition\r\n                key={note.id}\r\n                classNames={'note'}\r\n                timeout={800}\r\n            >\r\n                <li className=\"list-group-item note\">\r\n                    <div>\r\n                        <strong>{note.title}</strong>\r\n                        <small>{new Date().toLocaleDateString()} </small>\r\n                    </div>\r\n                    <button type=\"button\" className=\"btn btn-outline-danger btn-sm\" onClick={() => onRemove(note.id)}>&times;</button>\r\n                </li>\r\n            </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n)\r\n\r\n","import React, { Fragment, useContext, useEffect } from 'react'\r\nimport { Form } from '../components/Form'\r\nimport { Loader } from '../components/Loader'\r\nimport { Notes } from '../components/Notes'\r\nimport { FirebaseContext } from '../context/firebase/firebaseContext'\r\n\r\n\r\nexport const Home = () => {\r\n    const { loading, notes, fetchNotes, removeNote } = useContext(FirebaseContext)\r\n\r\n    useEffect(() => {\r\n        fetchNotes()\r\n        // eslint-disable-next-line\r\n    }, [])\r\n    return (\r\n        <Fragment>\r\n            <Form />\r\n            <hr />\r\n            {loading ? <Loader /> : < Notes notes={notes} onRemove={removeNote} />}\r\n\r\n        </Fragment>\r\n    )\r\n\r\n\r\n}","import React from 'react'\r\n\r\nexport const About = () => (\r\n    <div className=\"jumbotron\">\r\n        <div className=\"container\">\r\n            <h1 className=\"display-4\">Note React</h1>\r\n            <p className=\"lead\">Version <strong>1.0.0</strong></p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n\r\n","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const NavBar = () => (\r\n    <nav className=\"navbar navbar-dark navbar-expand-lg bg-primary\">\r\n        <div className=\"navbar-brend\">\r\n            Note App\r\n        </div>\r\n        <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n                <NavLink\r\n                    className=\"nav-link\"\r\n                    to=\"/\"\r\n                    exact\r\n                >\r\n                    Home\r\n                </NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n                <NavLink\r\n                    className=\"nav-link\"\r\n                    to=\"/about\"\r\n                >\r\n                    About\r\n                </NavLink>\r\n            </li>\r\n\r\n        </ul>\r\n    </nav>\r\n)\r\n","import React, { useContext } from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { AlertContext } from '../context/alert/alertContext'\r\n\r\nexport const Alert = () => {\r\n    const { alert, hide } = useContext(AlertContext)\r\n\r\n    // if (!alert.visible) {\r\n    //     return null\r\n    // }\r\n\r\n    return (\r\n        <CSSTransition\r\n            in={alert.visible}\r\n            timeout={{\r\n                enter: 500,\r\n                exit: 350\r\n            }}\r\n            classNames={'alert'}\r\n            mountOnEnter\r\n            unmountOnExit\r\n        >\r\n            <div className={`alert alert-${alert.type || 'warning'} alert-dismissible`}>\r\n                <strong>Attention!</strong>\r\n            &nbsp;{alert.text}\r\n                <button onClick={hide} type=\"button\" className=\"close\" aria-label=\"Close\">\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n            </div>\r\n        </CSSTransition>\r\n    )\r\n}","import { HIDE_ALERT, SHOW_ALERT } from \"../types\"\r\n\r\nconst handlers = {\r\n    [SHOW_ALERT]: (state, { payload }) => ({ ...payload, visible: true }),\r\n    [HIDE_ALERT]: state => ({ ...state, visible: false }),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const AlertReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n\r\n    return handle(state, action)\r\n}","export const SHOW_ALERT = 'SHOW_ALERT'\r\nexport const HIDE_ALERT = 'HIDE_ALERT'\r\nexport const SHOW_LOADER = 'SHOW_LOADER'\r\nexport const ADD_NOTE = 'ADD_NOTE'\r\nexport const FETCH_NOTES = 'FETCH_NOTES'\r\nexport const REMOVE_NOTE = 'REMOVE_NOTE'","import React, { useReducer } from 'react'\r\nimport { HIDE_ALERT, SHOW_ALERT } from '../types'\r\nimport { AlertContext } from './alertContext'\r\nimport { AlertReducer } from './alertReducer'\r\n\r\nexport const AlertState = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AlertReducer, { visible: false })\r\n\r\n    const show = (text, type = 'warning') => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: { text, type }\r\n        })\r\n    }\r\n\r\n    const hide = () => dispatch({ type: HIDE_ALERT })\r\n\r\n    return (\r\n        <AlertContext.Provider value={{\r\n            show, hide,\r\n            alert: state\r\n        }}>\r\n            {children}\r\n        </AlertContext.Provider>\r\n    )\r\n}","import { ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER } from \"../types\"\r\n\r\nconst handlers = {\r\n    [SHOW_LOADER]: state => ({ ...state, loading: true }),\r\n    [ADD_NOTE]: (state, { payload }) => ({ ...state, notes: [...state.notes, payload] }),\r\n    [FETCH_NOTES]: (state, { payload }) => ({ ...state, notes: payload, loading: false }),\r\n    [REMOVE_NOTE]: (state, { payload }) => ({\r\n        ...state,\r\n        notes: state.notes.filter(note => note.id !== payload)\r\n    }),\r\n    DEFAULT: state => state\r\n}\r\n\r\nexport const firebaseReducer = (state, action) => {\r\n    const handle = handlers[action.type] || handlers.DEFAULT\r\n\r\n    return handle(state, action)\r\n}","import React, { useReducer } from 'react'\r\nimport axios from 'axios'\r\nimport { FirebaseContext } from './firebaseContext'\r\nimport { firebaseReducer } from './firebaseReducer'\r\nimport { ADD_NOTE, FETCH_NOTES, REMOVE_NOTE, SHOW_LOADER } from '../types'\r\n\r\n\r\nconst url = process.env.REACT_APP_DB_URL\r\n\r\nexport const FirebaseState = ({ children }) => {\r\n    const initialState = {\r\n        notes: [],\r\n        loading: false\r\n    }\r\n    const [state, dispatch] = useReducer(firebaseReducer, initialState)\r\n\r\n    const showLoader = () => dispatch({ type: SHOW_LOADER })\r\n\r\n    const fetchNotes = async () => {\r\n        showLoader()\r\n        const res = await axios.get(`${url}/notes.json`)\r\n        //console.log('fetchNotes', res.data)\r\n        const payload = Object.keys(res.data).map(key => {\r\n            return {\r\n                ...res.data[key],\r\n                id: key\r\n            }\r\n        })\r\n\r\n        dispatch({\r\n            type: FETCH_NOTES,\r\n            payload\r\n        })\r\n    }\r\n\r\n    const addNote = async title => {\r\n        const note = {\r\n            title, date: new Date().toJSON()\r\n        }\r\n\r\n        try {\r\n            const res = await axios.post(`${url}/notes.json`, note)\r\n            //console.log('addNote', res.data)\r\n            const payload = {\r\n                ...note,\r\n                id: res.data.name\r\n            }\r\n\r\n            dispatch({\r\n                type: ADD_NOTE,\r\n                payload\r\n            })\r\n        } catch (e) {\r\n            throw new Error(e.message)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const removeNote = async id => {\r\n        await axios.delete(`${url}/notes/${id}.json`)\r\n        dispatch({\r\n            type: REMOVE_NOTE,\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    return (\r\n        <FirebaseContext.Provider value={{\r\n            showLoader, addNote, removeNote, fetchNotes,\r\n            loading: state.loading,\r\n            notes: state.notes\r\n        }}>\r\n            {children}\r\n        </FirebaseContext.Provider>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Home } from './pages/Home'\nimport { About } from './pages/About'\nimport { NavBar } from './components/NavBar';\nimport { Alert } from './components/Alert';\nimport { AlertState } from './context/alert/AlertState';\nimport { FirebaseState } from './context/firebase/FirebaseState';\n\nfunction App() {\n  return (\n    <FirebaseState>\n      <AlertState>\n        <BrowserRouter>\n          <NavBar />\n          <div className=\"container pt-4\">\n            <Alert />\n            <Switch>\n              <Route path={'/'} exact component={Home} />\n              <Route path={'/about'} component={About} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </AlertState>\n    </FirebaseState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}